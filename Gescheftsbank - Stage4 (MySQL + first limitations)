#Geschaftsbank - Stage4 (MySQL + cash management)

'''

lex = pd.read_sql_query('SELECT EndDate FROM geshbank.loan_accounts WHERE ClientId = 3042', con = engine)
проблема - он считывает данные как строковые значения

Проблему помог решить Илья: дело в том, что при создании базы данных тип в столбце EndDate определён как строка, 
то есть проблема в самой базе.

Решение: переписать базу, определить таблицу в явном виде

Другой вариант решения (менее предпочтительный): при написаннии запроса кастить поля. Минус: кастить придётся каждый раз.

'''


#Основные задачи:
#   Внедрить MySQL
#   Сформировать резервы - пилот
#   Ввести стохастические параметры клиентов (сроки)
#   Создать прототип платёжного календаря - это лучше не сейчас
#   Добить управление кэшем

import numpy as np
import pandas as pd
import random
import matplotlib.pyplot as plt
import mysql.connector as cnt
#import statsmodels.api as sm
from sqlalchemy import create_engine
try:
    import pymysql
    pymysql.install_as_MySQLdb()
except ImportError:
    pass
#import requests #будем парсить через данный модуль

db_connector = cnt.connect(host="localhost", user="lexbrown", passwd="***")
bank_cursor = db_connector.cursor()
bank_cursor.execute("CREATE DATABASE IF NOT EXISTS Geshbank")
#bank_cursor.execute("CREATE TABLE IF NOT EXISTS Geshbank.Vovochka (Aaa int, Bbb int, Ccc varchar(255))")
crTable_la = "CREATE TABLE IF NOT EXISTS Geshbank.loan_accounts \
                (AccType VARCHAR(255), \
                ClientId INT, \
                BeginDate INT, \
                EndDate INT, \
                BeginQ INT, \
                EndQ DOUBLE(30, 2), \
                PD DOUBLE(10, 2), \
                LGD DOUBLE(10, 2), \
                InterestRate DOUBLE(10, 4), \
                Status VARCHAR(255), \
                Random DOUBLE(10, 4), \
                DefaultFunc DOUBLE(10, 4))"
crTable_da = "CREATE TABLE IF NOT EXISTS Geshbank.deposit_accounts \
                (AccType VARCHAR(255), \
                ClientId INT, \
                BeginDate INT, \
                EndDate INT, \
                BeginQ INT, \
                EndQ DOUBLE(30, 2), \
                Status VARCHAR(255))"
crTable_bf = "CREATE TABLE IF NOT EXISTS Geshbank.balance_frame \
                (DayNumber INT, \
                CashBalance INT, \
                AssetBalance INT, \
                DailyCashInflow DOUBLE(30, 2), \
                DailyCashOutflow DOUBLE(30, 2))"
bank_cursor.execute(crTable_la)
bank_cursor.execute(crTable_da)
bank_cursor.execute(crTable_bf)
engine = create_engine('mysql+mysqldb://lexbrown:***@localhost/Geshbank', echo=False)


capital = 100000
liabilities = 0
interestincome = 0
interestcosts = 0
placcount = 0
loanaccount = 0
operationcosts = 0
default_losses = 0

#reserve_expenses = 0
#reserve_recovery = 0

risk_free_rate = 0.06

daily_outflow = 0
daily_inflow = 0


days =  int(input("Введите количество дней: ")) #перевести на инпуты
max_clients = int(input("Введите максимальное количество клиентов в день: "))



id = 0

def assets(): #Активы
    return capital + netincome() + liabilities
def cash(): #Наличка
    return assets() - loanaccount
def placcount(): #Чистая процентная маржа
    return interestincome - interestcosts
#def reserves():
#    return reserve_expenses - reserve_recovery
def netincome():
    return placcount() - operationcosts - default_losses


#день
for i in range(days):   #номер дня это i+1
    randnumloans = random.choice(range(max_clients)) #чот сильно
    #randnumloans = (10 + 15 * np.sin(i / 5) + i)
    #randnumdeposits = (10 + 15 * np.sin(i / 5) + i) #чот тож, многовато для маленького банка то
    randnumdeposits = random.choice(range(max_clients)) #чот сильно
    #if cash() > assets()/10:
    for n in range(int(randnumloans)):
        accType = 'L'
        clientId = id + 1
        beginDate = i + 1 #это чтобы дня О не было
        endDate = i + 1 + random.choice(range(2, 16)) * 10
        beginQ = random.choice(range(1, 101))*100
        if beginQ > cash():
            continue
        if netincome() + capital < assets() * 0.1:
            continue
        status = 'Active'
        prob_d = round(np.random.beta(1, 7) / 10 + 0.01, 2)
        lgd = round(np.random.beta(1, 7), 2)
        interest_rate = round((risk_free_rate + prob_d * lgd) /(1 - prob_d) + 0.015, 4)
        endQ = round(beginQ * (1 + interest_rate * (endDate - beginDate) / 252), 2)
        random_default = random.choice(range(1, 101))/100
        default_function = random_default * np.exp(prob_d)
        #newcustomer = [accType, clientId, beginDate, endDate, beginQ, endQ, prob_d, lgd, interest_rate, status, random_default, default_function]
        #open_loan_accounts.loc[len(open_loan_accounts)] = newcustomer
        pd.DataFrame([{'AccType':accType, 'ClientId':clientId, 'BeginDate':beginDate, 'EndDate':endDate, 
                      'BeginQ':beginQ, 'EndQ':endQ, 'PD':prob_d, 'LGD':lgd, 'InterestRate':interest_rate, 'Status':status,
                       'Random':random_default, 'DefaultFunc':default_function}]).to_sql('loan_accounts', con = engine, index = False, if_exists = 'append')
        id += 1
        loanaccount += beginQ
        daily_outflow += beginQ
        #reserve_expenses += (beginQ * prob_d * lgd)
    for n in range(int(randnumdeposits)):
        if netincome() + capital < assets() * 0.1:
            continue
        accType = 'D'
        clientId = id + 1
        beginDate = i + 1
        endDate = i + 1 + random.choice(range(2, 16)) * 10
        beginQ = random.choice(range(1, 101))*100
        endQ = round(beginQ * (1 + 0.03 * (endDate - beginDate) / 252), 2)
        status = 'Active'
        #newcustomer = [accType, clientId, beginDate, endDate, beginQ, endQ, status]
        #open_deposit_accounts.loc[len(open_deposit_accounts)] = newcustomer
        pd.DataFrame([{'AccType':accType, 'ClientId':clientId, 'BeginDate':beginDate, 'EndDate':endDate, 'BeginQ':beginQ, 'EndQ':endQ, 'Status':status}]).to_sql('deposit_accounts', con = engine, index = False, if_exists = 'append')
        id += 1
        liabilities += beginQ
        daily_inflow += beginQ

#вечер
    
    #кредиты
    evening_frame = pd.read_sql_query("SELECT * FROM Geshbank.loan_accounts WHERE EndDate = %s", con = engine, params = (i+1, ))
#    for n in range(len(evening_frame)):
#        print('lol')
    closing_update = "UPDATE Geshbank.loan_accounts SET Status = %s WHERE EndDate = %s"
    closing_values = ('Closed', i+1)
    bank_cursor.execute(closing_update, closing_values)
    db_connector.commit()  
    loanaccount -= float(np.sum(evening_frame['BeginQ']))
    #evening_default_frame = pd.read_sql_query("SELECT * FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc >= 1", con = engine, params = (i+1, ))
    daily_inflow += ((pd.read_sql_query("SELECT SUM(BeginQ * (1 - LGD)) AS Repayment FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc >= 1", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    #default_losses += np.sum(pd.read_sql_query("SELECT BeginQ * LGD AS Losses FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc >= 1", con = engine, params = (i+1, )))
    default_losses += ((pd.read_sql_query("SELECT SUM(BeginQ * LGD) AS Losses FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc >= 1", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    interestincome += ((pd.read_sql_query("SELECT SUM(BeginQ * (InterestRate * (EndDate - BeginDate) / 252)) AS Income FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc < 1", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    daily_inflow += ((pd.read_sql_query("SELECT SUM(EndQ) FROM Geshbank.loan_accounts WHERE EndDate = %s AND DefaultFunc < 1", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]

    #депозиты
    evening_frame = pd.read_sql_query("SELECT * FROM Geshbank.deposit_accounts WHERE EndDate = %s", con = engine, params = (i+1, ))
    closing_update = "UPDATE Geshbank.deposit_accounts SET Status = %s WHERE EndDate = %s"
    closing_values = ('Closed', i+1)
    bank_cursor.execute(closing_update, closing_values)
    db_connector.commit()
    liabilities -= np.sum(evening_frame['BeginQ'])
    interestcosts += ((pd.read_sql_query("SELECT SUM(BeginQ * (0.03 * (EndDate - BeginDate) / 252)) AS Cost FROM Geshbank.deposit_accounts WHERE EndDate = %s AND AccType = 'D'", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    interestcosts += ((pd.read_sql_query("SELECT SUM(BeginQ * (0.06 * (EndDate - BeginDate) / 252)) AS Cost FROM Geshbank.deposit_accounts WHERE EndDate = %s AND AccType = 'O/N - D'", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    daily_outflow += ((pd.read_sql_query("SELECT SUM(EndQ) FROM Geshbank.deposit_accounts WHERE EndDate = %s", con = engine, params = (i+1, ))).sum(axis = 0)).iat[0]
    operationcosts += 20
    daily_outflow += 20
    

    '''
    for n in range(len(open_loan_accounts)): #вечерняя проверка кредитных счетов
        if open_loan_accounts.loc[n, 'EndDate'] == i+1 and open_loan_accounts.loc[n, 'Status'] == 'Active':
            open_loan_accounts.loc[n, 'Status'] = 'Closed'
            loanaccount -= open_loan_accounts.loc[n, 'BeginQ']
            if open_loan_accounts.loc[n, 'AccType'] != 'O/N - L': #можно грамотнее: если дефолтный и L - тогда признать убыток. Иначе - нет
                #reserve_recovery += (open_loan_accounts.loc[n, 'BeginQ'] * open_loan_accounts.loc[n, 'LGD'] * open_loan_accounts.loc[n, 'PD'])
                if open_loan_accounts.loc[n, 'Default function'] >= 1: #Если дефолт
                    daily_inflow += (open_loan_accounts.loc[n, 'BeginQ'] * (1 - open_loan_accounts.loc[n, 'LGD']))
                    default_losses += (open_loan_accounts.loc[n, 'BeginQ'] * open_loan_accounts.loc[n, 'LGD'])
                else:
                    interestincome += open_loan_accounts.loc[n, 'BeginQ'] * (open_loan_accounts.loc[n, 'Interest rate'] * (open_loan_accounts.loc[n, 'EndDate'] - open_loan_accounts.loc[n, 'BeginDate']) / 252)
                    daily_inflow += (open_loan_accounts.loc[n, 'BeginQ'] * (1 + (open_loan_accounts.loc[n, 'Interest rate'] * (open_loan_accounts.loc[n, 'EndDate'] - open_loan_accounts.loc[n, 'BeginDate']) / 252)))
            else:
                interestincome += open_loan_accounts.loc[n, 'BeginQ'] * (open_loan_accounts.loc[n, 'Interest rate'] * (open_loan_accounts.loc[n, 'EndDate'] - open_loan_accounts.loc[n, 'BeginDate']) / 252)
                daily_inflow += (open_loan_accounts.loc[n, 'BeginQ'] * (1 + (open_loan_accounts.loc[n, 'Interest rate'] * (open_loan_accounts.loc[n, 'EndDate'] - open_loan_accounts.loc[n, 'BeginDate']) / 252)))
            closed_loan_accounts.loc[id_loan_closed] = open_loan_accounts.loc[n]
            id_loan_closed += 1
    for n in range(len(open_deposit_accounts)): #вечерняя проверка депозитных счетов
        if open_deposit_accounts.loc[n, 'EndDate'] == i+1 and open_deposit_accounts.loc[n, 'Status'] == 'Active':
            open_deposit_accounts.loc[n, 'Status'] = 'Closed'
            if open_deposit_accounts.loc[n, 'AccType'] == 'D':
                liabilities -= open_deposit_accounts.loc[n, 'BeginQ']
                interestcosts += open_deposit_accounts.loc[n, 'BeginQ'] * (0.03 * (open_deposit_accounts.loc[n, 'EndDate'] - open_deposit_accounts.loc[n, 'BeginDate']) / 252)
                daily_outflow += (open_deposit_accounts.loc[n, 'BeginQ'] * (1 + (0.03 * (open_deposit_accounts.loc[n, 'EndDate'] - open_deposit_accounts.loc[n, 'BeginDate']) / 252)))
            else: #open_deposit_accounts.loc[n, 'AccType'] == 'O/N':
                liabilities -= open_deposit_accounts.loc[n, 'BeginQ']
                interestcosts += open_deposit_accounts.loc[n, 'BeginQ'] * (0.01 * (open_deposit_accounts.loc[n, 'EndDate'] - open_deposit_accounts.loc[n, 'BeginDate']) / 252)
                daily_outflow += (open_deposit_accounts.loc[n, 'BeginQ'] * (1 + (0.01 * (open_deposit_accounts.loc[n, 'EndDate'] - open_deposit_accounts.loc[n, 'BeginDate']) / 252)))
            #начать closedaccounts
            closed_deposit_accounts.loc[id_deposit_closed] = open_deposit_accounts.loc[n]
            id_deposit_closed += 1
    operationcosts += 200
    daily_outflow += 200
    '''


    #вечерние проверки
    if cash() < 0:
        accType = 'O/N - D'
        clientId = id + 1
        beginDate = i + 1
        endDate = i + 2
        beginQ = int(-cash() + assets() * 0.1)
        endQ = round(beginQ * (1 + risk_free_rate * (endDate - beginDate) / 252), 2)
        status = 'Active'
        pd.DataFrame([{'AccType':accType, 'ClientId':clientId, 'BeginDate':beginDate, 'EndDate':endDate, 'BeginQ':beginQ, 'EndQ':endQ, 'Status':status}]).to_sql('deposit_accounts', con = engine, index = False, if_exists = 'append')
        id += 1
        liabilities += beginQ
        daily_inflow += beginQ
    elif cash() < (assets() * 0.05):
        accType = 'O/N - D'
        clientId = id + 1
        beginDate = i + 1
        endDate = i + 2
        beginQ = int(assets() * 0.1)
        endQ = round(beginQ * (1 + risk_free_rate * (endDate - beginDate) / 252), 2)
        status = 'Active'
        pd.DataFrame([{'AccType':accType, 'ClientId':clientId, 'BeginDate':beginDate, 'EndDate':endDate, 'BeginQ':beginQ, 'EndQ':endQ, 'Status':status}]).to_sql('deposit_accounts', con = engine, index = False, if_exists = 'append')
        id += 1
        liabilities += beginQ
        daily_inflow += beginQ
    elif cash() > (assets() * 0.20):
        accType = 'O/N - L'
        clientId = id + 1
        beginDate = i + 1
        endDate = i + 2
        beginQ = int(cash() - assets() * 0.15)
        status = 'Active'
        prob_d = 0
        lgd = 0
        interest_rate = risk_free_rate
        endQ = round(beginQ * (1 + interest_rate * (endDate - beginDate) / 252), 2)
        random_default = random.choice(range(1, 101))/100
        default_function = random_default * np.exp(prob_d)
        pd.DataFrame([{'AccType':accType, 'ClientId':clientId, 'BeginDate':beginDate, 'EndDate':endDate, 
                      'BeginQ':beginQ, 'EndQ':endQ, 'PD':prob_d, 'LGD':lgd, 'InterestRate':interest_rate, 'Status':status,
                       'Random':random_default, 'DefaultFunc':default_function}]).to_sql('loan_accounts', con = engine, index = False, if_exists = 'append')
        id += 1
        loanaccount += beginQ
        daily_outflow += beginQ
    else:
        True
        
    '''        
    #openaccounts = openaccounts.drop(np.where(openaccounts["Status"] == "Closed")[0]) - не работает более чем для 6 дней
    open_loan_accounts = open_loan_accounts[open_loan_accounts.Status != "Closed"] #это ужасно
    open_deposit_accounts = open_deposit_accounts[open_deposit_accounts.Status != "Closed"] #дублирование - вообще ужас
    open_loan_accounts.index = np.arange(len(open_loan_accounts))
    open_deposit_accounts.index = np.arange(len(open_deposit_accounts))
    '''
    #operationcosts += 200
    #daily_outflow += 200
    placcount()
    pd.DataFrame([{'DayNumber':i+1, 'CashBalance':cash(), 'AssetBalance':assets(), 'DailyCashInflow':daily_inflow, 'DailyCashOutflow':daily_outflow}]).to_sql('balance_frame', con = engine, index = False, if_exists = 'append')
    daily_outflow = 0
    daily_inflow = 0
    #cash_balance[i] = cash()
    #cash_balance.index = np.arange(days)
    #placcount()
    print("День ", i+1)


#Reports:

#Graphical Report
graphRep = plt.figure(figsize=(15, 15))
ax1 = graphRep.add_subplot(3, 2, 1)
ax2 = graphRep.add_subplot(3, 2, 2)
ax3 = graphRep.add_subplot(3, 2, 3)
ax4 = graphRep.add_subplot(3, 2, 4)
ax5 = graphRep.add_subplot(3, 2, 5)
ax6 = graphRep.add_subplot(3, 2, 6)
balancesheet = pd.DataFrame([[loanaccount, 0], [cash(), 0], 
                        [0, capital], [0, netincome()], [0, liabilities]], 
    index = ['Loans', 'Cash', 'Equity', 'RE', 'Debt'], 
    columns = ['Assets', 'Equity and Debt'])
incomestatement = pd.DataFrame([interestincome, interestcosts, placcount(),
                                operationcosts, default_losses, netincome()], 
    index = ['Interest income', 'Interest costs (-)', 'NIM', 
             'Operating costs (-)', 'Default losses (-)', 'Net income'], 
    columns = ['Accounts'])
#incomestatement.index.name = "P&L accounts"

balancesheet.T.plot(grid = True, rot = 0, ax = ax1, kind = "bar", stacked = True, fontsize = 12)
ax1.set_ylabel("U.S. dollars", fontsize = 15)
ax1.set_title("Balance sheet", fontsize = 25)
ax1.legend(loc= "center right", fontsize = 10)

#ax2.set_ylabel(fontsize = 20)
ax2.set_title("Income statement", fontsize = 25)
#ax2.legend(loc="center left", fontsize = 12)
#incomestatement.T.plot(grid = True, rot = 0, ax = ax2, kind = "bar", fontsize = 12)
ax2.barh(incomestatement.index, incomestatement.Accounts)
ax2.invert_yaxis()
ax2.grid(True)


cash_balance = pd.read_sql('SELECT * FROM Geshbank.Balance_frame', con = engine)
#cash_balance['CashBalance'].plot(grid = True, ax = ax3, marker = 'D', fontsize = 12, color = 'orange')
cash_balance['CashBalance'].plot(grid = True, ax = ax3, fontsize = 12, color = 'orange')
#ax3.fill_between(cash_balance['DayNumber'], cash_balance['Balance'], color = 'r')
asset_balance = pd.read_sql('SELECT * FROM Geshbank.Balance_frame', con = engine)
#asset_balance['AssetBalance'].plot(grid = True, ax = ax3, marker = 'o', fontsize = 12, color = 'red')
asset_balance['AssetBalance'].plot(grid = True, ax = ax3, fontsize = 12, color = 'red')
ax3.set_ylabel("U.S. dollars", fontsize = 15)
ax3.set_title("Cash balance", fontsize = 25)
ax3.legend(loc="best", fontsize = 12)

cash_balance['DailyCashOutflow'].plot(grid = True, ax = ax4, marker = 's', fontsize = 12, color = 'g')
cash_balance['DailyCashInflow'].plot(grid = True, ax = ax4, marker = 'v', fontsize = 12, color = 'b')
ax4.set_title("Daily flows", fontsize = 25)
ax4.legend(loc="best", fontsize = 12)
#ax4.set_xticks(cash_balance['DayNumber'])

unionframe = pd.read_sql('SELECT * FROM Geshbank.loan_accounts', con = engine)
unionframe.index = np.arange(len(unionframe))
ax5.hist(unionframe['LGD'], bins = 11)
ax5.set_title("LGD Distribution", fontsize = 25)

ax6.hist(unionframe['PD'], bins = 8)
ax6.set_title("PD Distribution", fontsize = 25)

plt.subplots_adjust(wspace=0.5)
graphRep.savefig("Report - Stage 4.png")

#Table reports:
print()
print("Банк работал ", days, " дней")
print()
print("Баланс на конец периода:")
print(balancesheet)
print()
print("Total assets: ", assets())
print()
print(incomestatement)
print()
print('Овернайты на рынке межбанковских кредитов брались ', 
      ((pd.read_sql("SELECT COUNT(*) FROM geshbank.deposit_accounts WHERE AccType = 'O/N - D'", con = engine)).sum(axis = 0)).iat[0],
      ' раз:')

'''
if len(closed_deposit_accounts.loc[closed_deposit_accounts.AccType == 'O/N - D']) != 0:
    print(closed_deposit_accounts.loc[closed_deposit_accounts.AccType == 'O/N - D'])
if len(open_deposit_accounts.loc[open_deposit_accounts.AccType == 'O/N - D']) != 0:
    print(open_deposit_accounts.loc[open_deposit_accounts.AccType == 'O/N - D'])
'''

    
print('Овернайты на рынке межбанковских кредитов давались ', 
       ((pd.read_sql("SELECT COUNT(*) FROM geshbank.loan_accounts WHERE AccType = 'O/N - L'", con = engine)).sum(axis = 0)).iat[0],
      ' раз:')

'''
if len(closed_loan_accounts.loc[closed_loan_accounts.AccType == 'O/N - L']) != 0:
    print(closed_loan_accounts.loc[closed_loan_accounts.AccType == 'O/N - L'])
if len(open_loan_accounts.loc[open_loan_accounts.AccType == 'O/N - L']) != 0:
    print(open_loan_accounts.loc[open_loan_accounts.AccType == 'O/N - L'])
'''
    
question = input('Сохраняем весь этот ужас? ')
if question == 'y':
    ladf = pd.read_sql('SELECT * FROM Geshbank.loan_accounts', con = engine)
    ladf.to_excel('Loan_accounts_Stage4.xlsx')
    dadf = pd.read_sql('SELECT * FROM Geshbank.deposit_accounts', con = engine)
    dadf.to_excel('Deposit_accounts_Stage4.xlsx')
    bfdf = pd.read_sql('SELECT * FROM Geshbank.Balance_frame', con = engine)
    bfdf.to_excel('Balance_frame_Stage4.xlsx')

